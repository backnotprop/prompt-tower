{
  "name": "prompt-tower",
  "displayName": "Prompt Tower",
  "version": "1.0.1",
  "license": "AGPL-3.0",
  "repository": {
    "type": "git",
    "url": "https://github.com/backnotprop/prompt-tower"
  },
  "author": {
    "name": "Michael Ramos",
    "url": "https://github.com/backnotprop"
  },
  "publisher": "backnotprop",
  "icon": "assets/prompt-tower-icon.png",
  "description": "Context creation and management tool for LLM coding agents. Build prompts with lots of code blocks in them, save templates, and dynamically manage context on your terms.",
  "categories": [
    "AI",
    "Machine Learning",
    "Programming Languages",
    "Chat",
    "Other"
  ],
  "engines": {
    "vscode": "^1.96.0"
  },
  "activationEvents": [],
  "main": "./dist/extension.js",
  "contributes": {
    "configuration": {
      "title": "Prompt Tower",
      "properties": {
        "promptTower.useGitignore": {
          "type": "boolean",
          "default": true,
          "description": "Use your .gitignore file to filter out files and folders available for context"
        },
        "promptTower.ignore": {
          "type": "array",
          "default": [
            "package-lock.json",
            "yarn.lock",
            "poetry.lock",
            "Gemfile.lock"
          ],
          "description": "Manual list of files and folders to ignore. This is in addition to the .gitignore file."
        },
        "promptTower.maxFileSizeWarningKB": {
          "type": "number",
          "default": 500,
          "description": "Show warning when selecting files larger than this size (in KB)"
        },
        "promptTower.outputFormat": {
          "type": "object",
          "description": "Customize the output format for generated context files.",
          "default": {
            "blockTemplate": "<file name=\"{fileNameWithExtension}\" path=\"{rawFilePath}\">\n{fileContent}\n</file>",
            "blockSeparator": "\n",
            "blockTrimLines": true,
            "projectTreeFormat": {
              "enabled": true,
              "type": "fullFilesAndDirectories",
              "showFileSize": true,
              "template": "<project_tree>\n{projectTree}\n</project_tree>\n"
            },
            "wrapperFormat": {
              "template": "<context>\n{treeBlock}<project_files>\n{blocks}\n</project_files>\n</context>"
            }
          },
          "properties": {
            "blockTemplate": {
              "type": "string",
              "description": "Template for wrapping each file's content. Placeholders: {fileNameWithExtension}, {filePath}(commented), {rawFilePath}(raw), {fileName}, {fileExtension}, {fullPath}, {fileContent}.",
              "default": "<file name=\"{fileNameWithExtension}\" path=\"{rawFilePath}\">\n{fileContent}\n</file>"
            },
            "blockSeparator": {
              "type": "string",
              "description": "Separator placed *between* formatted file blocks in the final output.",
              "default": "\n"
            },
            "blockTrimLines": {
              "type": "boolean",
              "description": "Trim leading and trailing blank lines from each file block.",
              "default": true
            },
            "projectTreeFormat": {
              "type": "object",
              "description": "Settings for the project tree block.",
              "properties": {
                "enabled": {
                  "type": "boolean",
                  "description": "Enable or disable the project tree block.",
                  "default": true
                },
                "type": {
                  "type": "string",
                  "description": "Type of project tree block to use.",
                  "enum": [
                    "fullFilesAndDirectories",
                    "fullDirectoriesOnly",
                    "selectedFilesOnly"
                  ],
                  "default": "fullFilesAndDirectories"
                },
                "showFileSize": {
                  "type": "boolean",
                  "description": "Show each file's size in the project tree block.",
                  "default": false
                },
                "template": {
                  "type": "string",
                  "description": "The template string for the project tree block. Use '{projectTree}' as the placeholder for where the tree block will be inserted.",
                  "default": "<project_tree>\n{projectTree}\n</project_tree>\n"
                }
              }
            },
            "wrapperFormat": {
              "type": [
                "object",
                "null"
              ],
              "description": "Settings for wrapping the entire generated output. Set to null to disable wrapping.",
              "default": {
                "template": "<context>\n{treeBlock}<project_files>\n{blocks}\n</project_files>\n</context>"
              },
              "properties": {
                "template": {
                  "type": "string",
                  "description": "The template string for the entire output. Use '{blocks}' as the placeholder for where the combined file blocks will be inserted. Other available placeholders: {timestamp}, {fileCount}, {workspaceRoot}, {outputFileName}.",
                  "default": "<context>\n{treeBlock}<project_files>\n{blocks}\n</project_files>\n</context>"
                }
              }
            }
          }
        }
      }
    },
    "viewsContainers": {
      "activitybar": [
        {
          "id": "prompt-tower",
          "title": "Prompt Tower",
          "icon": "assets/prompt-tower.svg"
        }
      ]
    },
    "views": {
      "prompt-tower": [
        {
          "icon": "assets/prompt-tower.svg",
          "id": "promptTowerView",
          "name": "Files",
          "type": "tree"
        }
      ]
    },
    "commands": [
      {
        "command": "promptTower.copyContextToClipboard",
        "title": "Copy Context to Clipboard",
        "icon": "$(clippy)"
      },
      {
        "command": "promptTower.toggleAllFiles",
        "title": "Toggle All Files",
        "icon": "$(checklist)"
      },
      {
        "command": "promptTower.refresh",
        "title": "Refresh File List",
        "icon": "$(refresh)"
      },
      {
        "command": "promptTower.clearSelections",
        "title": "Clear All Selections",
        "category": "Prompt Tower",
        "icon": "$(clear-all)"
      },
      {
        "command": "promptTower.showTowerUI",
        "title": "Show Prompt Tower UI",
        "category": "Prompt Tower"
      }
    ],
    "menus": {
      "commandPalette": [
        {
          "command": "promptTower.copyContextToClipboard"
        },
        {
          "command": "promptTower.toggleAllFiles",
          "when": "view == promptTowerView"
        },
        {
          "command": "promptTower.refresh",
          "when": "view == promptTowerView"
        },
        {
          "command": "promptTower.showTowerUI"
        },
        {
          "command": "promptTower.clearSelections"
        }
      ],
      "view/title": [
        {
          "command": "promptTower.copyContextToClipboard",
          "when": "view == promptTowerView",
          "group": "navigation@1"
        },
        {
          "command": "promptTower.toggleAllFiles",
          "when": "view == promptTowerView",
          "group": "navigation@2"
        },
        {
          "command": "promptTower.refresh",
          "when": "view == promptTowerView",
          "group": "navigation@3"
        },
        {
          "command": "promptTower.clearSelections",
          "when": "view == promptTowerView",
          "group": "navigation@4"
        }
      ]
    }
  },
  "homepage": "https://github.com/backnotprop/prompt-tower",
  "bugs": {
    "url": "https://github.com/backnotprop/prompt-tower/issues"
  },
  "keywords": [
    "AI",
    "prompt",
    "LLM",
    "context",
    "clipboard",
    "copy context",
    "ai",
    "AI Code Assistant",
    "AI Context Management",
    "AI Prompt Engineering",
    "AI Studio",
    "AI-Powered Coding",
    "assistant",
    "autocomplete",
    "c#",
    "c++",
    "ChatGPT",
    "Claude",
    "Claude Code",
    "code",
    "context creation",
    "context injection",
    "context management",
    "Copilot",
    "Cursor",
    "DeepSeek",
    "Developer Productivity",
    "free",
    "Gemini",
    "go",
    "golang",
    "Grok",
    "HuggingChat",
    "javascript",
    "json",
    "kotlin",
    "llm code context",
    "llm code prompts",
    "mcp",
    "Mistral",
    "openai",
    "php",
    "prompt templates",
    "python",
    "refactoring",
    "RooCode",
    "ruby",
    "Sonnet",
    "tools",
    "typescript",
    "vibe coding",
    "VS Code",
    "yaml"
  ],
  "scripts": {
    "vscode:prepublish": "npm run package",
    "compile": "npm run check-types && npm run lint && node esbuild.js",
    "watch": "npm-run-all -p watch:*",
    "watch:esbuild": "node esbuild.js --watch",
    "watch:tsc": "tsc --noEmit --watch --project tsconfig.json",
    "package": "npm run check-types && npm run lint && node esbuild.js --production",
    "compile-tests": "tsc -p . --outDir out",
    "watch-tests": "tsc -p . -w --outDir out",
    "pretest": "npm run compile-tests && npm run compile && npm run lint",
    "check-types": "tsc --noEmit",
    "lint": "eslint src",
    "test": "vscode-test"
  },
  "devDependencies": {
    "@types/mocha": "^10.0.10",
    "@types/node": "20.x",
    "@types/vscode": "^1.96.0",
    "@typescript-eslint/eslint-plugin": "^8.17.0",
    "@typescript-eslint/parser": "^8.17.0",
    "@vscode/test-cli": "^0.0.10",
    "@vscode/test-electron": "^2.4.1",
    "esbuild": "^0.25.2",
    "eslint": "^9.16.0",
    "npm-run-all": "^4.1.5",
    "typescript": "^5.7.2"
  },
  "dependencies": {
    "gpt-tokenizer": "^2.9.0"
  }
}
