# Cursor Rules: Prompt Tower - Prefix/Suffix Implementation

1.  Your primary instructions are in the file `current_task.md`. Follow the step-by-step guide provided in that file precisely.
2.  Apply the changes atomically as described in each step of `current_task.md`. Focus on modifying only the specified files and sections for each step.
3.  Ensure the necessary files listed below (especially those with `edit` rules) and `current_task.md` are included in your context when you start.

Let me know if any step in `current_task.md` is unclear. Start with Step 1.

rules:

# --- Instruction File ---

- file: current_task.md
  rule: instructions
  description: >-
  This file contains the primary step-by-step instructions for implementing
  the Prompt Prefix and Suffix text areas and integrating them into the export.
  Follow these steps exactly, atomically, and sequentially. Refer back to this file
  for the specific changes required in each step.

# --- Files Allowed for Editing (Based on current_task.md steps) ---

- file: src/providers/PromptTowerProvider.ts
  rule: edit
  description: >-
  Allow editing to:

  1. Add state variables (`promptPrefix`, `promptSuffix`) (Step 1).
  2. Add getter/setter methods for prefix/suffix (Step 2).
  3. Modify the `generateFile` method to incorporate prefix/suffix logic (Step 3).

  # Note: Step 4 involves verification, no direct edits expected based on final code.

- file: src/extension.ts
  rule: edit
  description: >-
  Allow editing to:
  1. Modify `getWebviewContent` signature, HTML, CSS, and JavaScript logic for text areas, state handling, event listeners, and message handlers (Steps 4, 5, 6, 7, 8, 9, 15).
  2. Modify `createOrShowWebviewPanel` to handle initial state fetching, panel options update, reveal logic update, and message handling for prefix/suffix communication (Steps 10, 11, 12, 13, 14).

# --- Files Primarily for Context ---

- file: src/commands.ts
  rule: context
  description: >-
  Provide context on how commands related to the provider and UI panel
  are registered and how instances are passed. (Not directly edited in this task).

- file: src/models/FileItem.ts
  rule: context
  description: >-
  Provide context on the data model used for tree items, which the provider interacts with.
  (Not edited in this task).

- file: src/models/EventEmitter.ts
  rule: context
  description: >-
  Provide context on the event emitter used for communication between provider and webview.
  (Not edited in this task).

- file: package.json
  rule: context
  description: >-
  Provide context on overall extension configuration, commands, and dependencies.
  (Not edited in this task).

- file: README.md
  rule: context
  description: >-
  Provide context on the overall extension goals and intended features.

# --- General Context Rules ---

# Allows context from any TS file if needed, but prioritizes specific rules above.

- file: src/\*_/_.ts
  rule: context
  description: >-
  Provide general context for any other TypeScript source files if needed to understand
  the interactions within the edited files.
